@model ComboOfferVM
@{
    ViewBag.Title = "Add Combo Offer";
    List<KrupaBuildGallery.VariantItemVM> lstMainVarint = ViewData["MainVariantList"] as List<KrupaBuildGallery.VariantItemVM>;
  
}

<div class="page-body">

    <!-- Container-fluid starts-->
    <div class="container-fluid">
        <div class="page-header">
            <div class="row">
                <div class="col">
                    <div class="page-header-left">
                        <h3>
                            Edit Combo Offer
                        </h3>
                    </div>
                </div>
                <div class="col-lg-6">
                    <ol class="breadcrumb pull-right">
                        <li class="breadcrumb-item"><a href="/admin/dashboard"><i data-feather="home"></i></a></li>
                        <li class="breadcrumb-item"><a href="/admin/combooffer">Combo Offer</a></li>
                        <li class="breadcrumb-item active">Edit Combo Offer</li>
                    </ol>
                </div>
            </div>
        </div>
    </div>
    <!-- Container-fluid Ends-->
    <!-- Container-fluid starts-->
    <div class="container-fluid">
        <div class="row">
            <div class="col-sm-12">
                <div class="card">
                    <div class="card-header">
                        <h5>Edit Combo Offer</h5>
                    </div>
                    <div class="card-body">
                        @using (Html.BeginForm("Edit", "ComboOffer", FormMethod.Post, new { @id = "ComboOfferFormId", @class = "needs-validation", enctype = "multipart/form-data", role = "form" }))
                        {

                            @Html.AntiForgeryToken()
                            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                            <div class="form-group row" style="margin-top: 30px;">
                                @Html.LabelFor(model => model.OfferTitle, htmlAttributes: new { @class = "col-xl-3 col-md-4" })
                                @Html.EditorFor(model => model.OfferTitle, new { htmlAttributes = new { @class = "form-control col-md-8", @placeholder = "Enter Offer Title", maxlength = "600" } })

                                <lable class="col-xl-3 col-md-4"></lable>
                                @Html.ValidationMessageFor(model => model.OfferTitle, "", new { @class = "text-danger" })
                            </div>

                            <div class="form-group row">
                                @Html.LabelFor(model => model.ComboOfferPrice, htmlAttributes: new { @class = "col-xl-3 col-md-4" })
                                @Html.EditorFor(model => model.ComboOfferPrice, new { htmlAttributes = new { @class = "form-control col-md-4", @placeholder = "Enter Offer Price", maxlength = "150" } })

                                <lable class="col-xl-3 col-md-4" id="actualprice"></lable>
                                <input type="hidden" name="hdnTotalActualOfferPrice" id="hdnTotalActualOfferPrice" value="0" />
                                <input type="hidden" name="hdnTotalActualMRPPrice" id="hdnTotalActualMRPPrice" value="0" />
                                @Html.ValidationMessageFor(model => model.ComboOfferPrice, "", new { @class = "text-danger" })
                            </div>

                            <div class="form-group row">
                                @Html.LabelFor(model => model.OfferStartDate, htmlAttributes: new { @class = "col-xl-3 col-md-4" })
                                @Html.EditorFor(model => model.OfferStartDate, new { htmlAttributes = new { @class = "form-control col-md-8 clsDatePicker", @placeholder = "DD/MM/YYY", @readonly = "readonly" } })

                                <lable class="col-xl-3 col-md-4"></lable>
                                @Html.ValidationMessageFor(model => model.OfferStartDate, "", new { @class = "text-danger" })
                            </div>

                            <div class="form-group row">
                                @Html.LabelFor(model => model.OfferEndDate, htmlAttributes: new { @class = "col-xl-3 col-md-4" })
                                @Html.EditorFor(model => model.OfferEndDate, new { htmlAttributes = new { @class = "form-control col-md-8 clsDatePicker", @placeholder = "DD/MM/YYY", @readonly = "readonly" } })

                                <lable class="col-xl-3 col-md-4"></lable>
                                @Html.ValidationMessageFor(model => model.OfferEndDate, "", new { @class = "text-danger" })
                            </div>

                            <div class="form-group row">
                                @Html.LabelFor(model => model.OfferImageFile, htmlAttributes: new { @class = "col-xl-3 col-md-4" })
                                @Html.TextBoxFor(model => model.OfferImageFile, new { type = "file", @class = "form-control col-md-8" })

                                <lable class="col-xl-3 col-md-4"></lable>
                                @Html.ValidationMessageFor(model => model.OfferImageFile, "", new { @class = "text-danger" })

                                <input type="hidden" value="@Model.OfferImage" name="OfferImage" />
                            </div>
                            if (!string.IsNullOrEmpty(Model.OfferImage))
                            {
                                <div class="form-group row">
                                    <p><a target="_blank" href="~/Images/ComboOffer/@Model.OfferImage"> Click here to view image </a></p>
                                </div>
                            }
                            <div class="form-group row">
                                @Html.LabelFor(model => model.OfferDescription, htmlAttributes: new { @class = "col-xl-3 col-md-4" })

                                @Html.TextAreaFor(model => model.OfferDescription, new { @class = "form-control col-md-8", @placeholder = "Enter Item Description", maxlength = "10000", cols = 35, @rows = 4, @style = "width:600px;height:80px;" })

                                <lable class="col-xl-3 col-md-4"></lable>
                                @Html.ValidationMessageFor(model => model.OfferDescription, "", new { @class = "text-danger" })
                            </div>
                            <div class="form-group row">
                                @Html.LabelFor(model => model.IsCashonDelieveryuse, htmlAttributes: new { @class = "col-xl-3 col-md-4" })
                                @Html.CheckBoxFor(model => model.IsCashonDelieveryuse, new { htmlAttributes = new { @class = "form-control col-md-8" } })

                                <lable class="col-xl-3 col-md-4"></lable>
                                @Html.ValidationMessageFor(model => model.IsCashonDelieveryuse, "", new { @class = "text-danger" })
                            </div>
                            <div class="row">

                                <div class="col-sm-2">
                                    <label>Main Item:</label>
                                </div>
                                <div class="col-sm-3">
                                    @Html.LabelFor(model => model.Main_CategoryId, htmlAttributes: new { @class = "" })
                                    @Html.DropDownListFor(model => model.Main_CategoryId, new SelectList(Model.Main_CategoryList, "Value", "Text"), "- Select -", new { @class = "form-control", @readonly = "readonly", style = "pointer-events:none" })

                                    <lable class=""></lable>
                                    @Html.ValidationMessageFor(model => model.Main_CategoryId, "", new { @class = "text-danger" })
                                </div>
                                <div class="col-sm-3">
                                    @Html.LabelFor(model => model.Main_ProductId, htmlAttributes: new { @class = "" })
                                    @Html.DropDownListFor(model => model.Main_ProductId, new SelectList(Model.Main_ProductList, "Value", "Text"), "- Select -", new { @class = "form-control", @readonly = "readonly", style = "pointer-events:none" })

                                    <lable class=""></lable>
                                    @Html.ValidationMessageFor(model => model.Main_ProductId, "", new { @class = "text-danger" })
                                </div>
                                <div class="col-sm-3">
                                    @Html.LabelFor(model => model.Main_SubProductId, htmlAttributes: new { @class = "" })
                                    @Html.DropDownListFor(model => model.Main_SubProductId, new SelectList(Model.Main_SubProductList, "Value", "Text"), "- Select -", new { @class = "form-control", @readonly = "readonly", style = "pointer-events:none" })

                                    <lable class=""></lable>
                                    @Html.ValidationMessageFor(model => model.Main_SubProductId, "", new { @class = "text-danger" })
                                </div>

                            </div>
                            <div class="row" style="margin-top:30px;">
                                <div class="col-sm-2">

                                </div>
                                <div class="col-sm-4">
                                    @Html.LabelFor(model => model.Main_ProductItemId, htmlAttributes: new { @class = "" })
                                    @Html.DropDownListFor(model => model.Main_ProductItemId, new SelectList(Model.Main_ProductItemList, "Value", "Text"), "- Select -", new { @class = "form-control", @readonly = "readonly", style = "pointer-events:none" })

                                    <lable class=""></lable>
                                    @Html.ValidationMessageFor(model => model.Main_ProductItemId, "", new { @class = "text-danger" })
                                </div>
                                <div class="col-sm-2">
                                    <label class="" for="MainVariantItem">Main Variant Item</label>
                                    <select class="form-control" id="MainVariantItem" name="MainVariantItem" readonly style="pointer-events: none;" onchange="calculatmain();">
                                        <option value='0'>- Select Variants -</option>
                                        @if (lstMainVarint != null && lstMainVarint.Count() > 0)
                                        {
                                            foreach (var objj in lstMainVarint)
                                            {
                                                string selectt = "";
                                                if (objj.VariantItemId == Model.MainVariantId)
                                                {
                                                    selectt = "selected";
                                                }
                                                <option value="@objj.VariantItemId" @selectt data-custprc="@objj.CustomerPrice" data-mrpprc="@objj.MRPPrice" >@objj.UnitQtys</option>

                                            }
                                        }
                                    </select>
                                    <lable class=""></lable>
                                    <span class="field-validation-valid text-danger"></span>
                                </div>
                                <div class="col-sm-2">
                                    @Html.LabelFor(model => model.Main_Qty, htmlAttributes: new { @class = "" })
                                    @Html.EditorFor(model => model.Main_Qty, new { htmlAttributes = new { @class = "form-control", @placeholder = "Qty", maxlength = "100", @readonly = "readonly", @onblur = "calculatmain();" } })

                                    <lable class=""></lable>
                                    @Html.ValidationMessageFor(model => model.Main_Qty, "", new { @class = "text-danger" })
                                </div>
                                <div class="col-sm-2">
                                    <label id="lbltotl" style="font-weight:bold;"></label>
                                    <input type="hidden" value="0" id="hdnTotalMain" />
                                    <input type="hidden" value="0" id="hdnTotalMRPMain" name="hdnTotalMRPMain" />
                                </div>
                            </div>
                            <div id="SubItems">
                                @Html.Action("GetSubItemsOfComboEdit", "ComboOffer", new { ComboId = Model.ComboOfferId })
                            </div>
                            <div class="row" style="margin-top:20px;">
                                <div class="col-sm-8"></div>
                                <div class="col-sm-4"><a href="javascript:void(0)" onclick="AddSubItem();" style="font-size: 15px;font-weight: bold;display:none;">Add Sub Item</a></div>
                            </div>


                            <div class="form-group row">
                                @Html.HiddenFor(x => x.ComboOfferId)
                                <lable class="col-xl-3 col-md-4"></lable>
                                <button type="submit" class="btn btn-primary" style="margin-right:10px;">Submit</button>
                                <button type="button" class="btn btn-danger" id="btnCancel">Cancel</button>
                            </div>

                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
    <!-- Container-fluid Ends-->

</div>

<script src="~/Content/assets/js/jquery-3.3.1.min.js"></script>
<script src="~/Scripts/jquery.validate.min.js"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>

<script>
    var jid = 0;
    $(document).on("click", "#btnCancel", function () {
        window.location.href = "/admin/combooffer";
    });

    jQuery(document).on("change", "#Main_CategoryId", function () {

        var CategoryId = jQuery("#Main_CategoryId option:selected").val();

        if (CategoryId != "" && CategoryId != null) {

            var URL = '@Url.Action("GetProductListByCategoryId", "SubProduct")';
            $.ajax({
                type: 'GET',
                async: true,
                url: URL + "/" + CategoryId,
                success: function (result) {
                    var htmlData = "<option value='0'>-Select Product-</option>";
                    if (result && result.length > 0) {
                        result.forEach(element => {
                            htmlData += "<option value='" + element.Value + "'> " + element.Text + " </option>";
                        });
                    }
                    $("#Main_ProductId").html(htmlData);
                    var htmlSubData = "<option value='0'>- Select SubProduct -</option>";
                    $("#Main_SubProductId").html(htmlSubData);
                    var htmlSubData = "<option value='0'>- Select Product Item -</option>";
                    $("#Main_ProductItemId").html(htmlSubData);
                    var htmlSubData = "<option value='0'>- Select Variants -</option>";
                    $("#MainVariantItem").html(htmlSubData);
                },
                error: function (error) {
                }
            });
        }
       else {
             var htmlSubData = "<option value='0'>- Select Product -</option>";
            $("#Main_ProductId").html(htmlSubData);
            var htmlSubData = "<option value='0'>- Select SubProduct -</option>";
            $("#Main_SubProductId").html(htmlSubData);
            var htmlSubData = "<option value='0'>- Select Product Item -</option>";
            $("#Main_ProductItemId").html(htmlSubData);
            var htmlSubData = "<option value='0'>- Select Variants -</option>";
            $("#MainVariantItem").html(htmlSubData);
        }
    });

    jQuery(document).on("change", "#Main_ProductId", function () {

        var ProductId = jQuery("#Main_ProductId option:selected").val();

        if (ProductId != "" && ProductId != null) {

            var URL = '@Url.Action("GetSubProductListByProductId", "SubProduct")';
            $.ajax({
                type: 'GET',
                async: true,
                url: URL + "/" + ProductId,
                success: function (result) {
                    var htmlData = "<option value='0'>-Select SubProduct-</option>";
                    if (result && result.length > 0) {
                        result.forEach(element => {
                            htmlData += "<option value='" + element.Value + "'> " + element.Text + " </option>";
                        });
                    }
                    $("#Main_SubProductId").html(htmlData);
                },
                error: function (error) {
                }
            });
        }
        else {
             var htmlSubData = "<option value='0'>- Select SubProduct -</option>";
            $("#Main_SubProductId").html(htmlSubData);
        }
    });

    jQuery(document).on("change", "#Main_ProductId,#Main_SubProductId", function () {

        var ProductId = jQuery("#Main_ProductId option:selected").val();
        var SubProductId = jQuery("#Main_SubProductId option:selected").val();

        if ((ProductId != "" && ProductId != null) || (SubProductId != "" && SubProductId != null)) {
            var URL = '@Url.Action("GetItemList", "Stock")';
            $.ajax({
                type: 'GET',
                async: true,
                url: URL + "?ProductId=" + ProductId + "&SubProductId=" + SubProductId,
                success: function (result) {
                    var htmlData = "<option value='0'>-Select Product Item-</option>";
                    if (result && result.length > 0) {
                        result.forEach(element => {
                            htmlData += "<option value='" + element.Value + "'> " + element.Text + " </option>";
                        });
                    }
                    $("#Main_ProductItemId").html(htmlData);
                },
                error: function (error) {
                }
            });
        }
       else {
            var htmlSubData = "<option value='0'>- Select Product Item -</option>";
            $("#Main_ProductItemId").html(htmlSubData);
        }
    });

     jQuery(document).on("change", "#Main_ProductItemId", function () {

        var ItemIdd = jQuery("#Main_ProductItemId option:selected").val();

        if (ItemIdd != "" && ItemIdd != null) {

            var URL = '@Url.Action("GetVariantListByItemId", "ComboOffer")';
            $.ajax({
                type: 'GET',
                async: true,
                url: URL + "/" + ItemIdd,
                success: function (result) {
                    var htmlData = "<option value='0'>-Select Variants-</option>";
                    if (result && result.length > 0) {
                        result.forEach(element => {
                            htmlData += "<option value='" + element.VariantItemId + "' data-custprc='" + element.CustomerPrice+"'> " + element.UnitQty + " </option>";
                        });
                    }
                    $("#MainVariantItem").html(htmlData);
                },
                error: function (error) {
                }
            });
        }
        else {
            var htmlSubData = "<option value='0'>- Select Variants -</option>";
            $("#MainVariantItem").html(htmlSubData);
        }
    });

    function AddSubItem() {
        jid = jid + 1;
            $("#SubItems").append($("<div class='dvsubitm_"+jid+"'>").load('@Url.Action("GetSubItemsOfCombo", "ComboOffer")' + '?Id=' + jid, function () {

        }));
    }

    function removesubitem(idds) {
        $(".dvsubitm_" + idds).remove();
    }

    function validateandsubmit() {
        var flgisvalid = true;    
     
            $("#ComboOfferFormId").submit();
      

    }

    function calculateprice(idds) {
        var prcc = 0;
        var qtyy = 0;
        var mrpprcc = 0;
        if ($("#Qty_" + idds).val() != "" && $("#Qty_" + idds).val() != "0") {
            qtyy = $("#Qty_" + idds).val();
        }
        if($("#VarintItem_" + idds).val() != "" && $("#VarintItem_" + idds).val() != "0") {
            prcc = Math.round(parseFloat($("#VarintItem_" + idds + " option:selected").attr("data-custprc")), 2);
            mrpprcc = Math.round(parseFloat($("#VarintItem_" + idds + " option:selected").attr("data-mrpprc")), 2);
        }
        var totll = Math.round(prcc * qtyy, 2);
        var totllmrp = Math.round(mrpprcc * qtyy, 2);      
        $("#hdntotl_" + idds).val(totll);
        $("#hdnmrptotl_" + idds).val(totllmrp);
        $("#lbltotl_" + idds).text("Total CustomerPrc: Rs " + totll + "Total MRPPrc: Rs " + totllmrp); 
        TotalActualPrice();
    }

    function calculatmain() {
        var prcc = 0;
        var qtyy = 0;
        var mrpprcc = 0;
        if ($("#Main_Qty").val() != "" && $("#Main_Qty").val() != "0") {
            qtyy = $("#Main_Qty").val();
        }
        if ($("#MainVariantItem").val() != "" && $("#MainVariantItem").val() != "0") {
            prcc = Math.round(parseFloat($("#MainVariantItem option:selected").attr("data-custprc")), 2);
            mrpprcc = Math.round(parseFloat($("#MainVariantItem option:selected").attr("data-mrpprc")), 2);
        }
        var totll = Math.round(prcc * qtyy, 2);
        var totllmrp = Math.round(mrpprcc * qtyy, 2);      
        $("#lbltotl").text("Total CustomerPrc: Rs " + totll + "Total MRPPrc: Rs " + totllmrp);
        $("#hdnTotalMain").val(totll);
        $("#hdnTotalMRPMain").val(totllmrp);
        TotalActualPrice();
    }


    function TotalActualPrice() {
        var ttl = 0;
        var ttlMrp = 0;
        $("input[name=hdntotl]").each(function () {
            if ($(this).val() != "" && $(this).val() != "0") {
                ttl = ttl + Math.round(parseFloat($(this).val()), 2);
            }
        })
        if ($("#hdnTotalMain").val() != "" && $("#hdnTotalMain").val() != "0") {
            ttl = ttl + Math.round(parseFloat($("#hdnTotalMain").val()), 2);
        }

        $("input[name=hdnmrptotal]").each(function () {
            if ($(this).val() != "" && $(this).val() != "0") {
                ttlMrp = ttlMrp + Math.round(parseFloat($(this).val()), 2);
            }
        })
        if ($("#hdnTotalMRPMain").val() != "" && $("#hdnTotalMRPMain").val() != "0") {
            ttlMrp = ttlMrp + Math.round(parseFloat($("#hdnTotalMRPMain").val()), 2);
        }

        $("#actualprice").text("Actual Total Customer: Rs " + ttl + "Total MRP: Rs " + ttlMrp);
        $("#hdnTotalActualOfferPrice").val(ttl);
        $("#hdnTotalActualMRPPrice").val(ttl);
    }

    jQuery(document).ready(function () {       
        calculatmain();
        $("select[name=SubItemVarints").each(function () {
            var idss = $(this).attr("data-id");
            calculateprice(idss);
        })
    });
</script>

